{"version":3,"sources":["firebase.js","StateProvider.js","reducer.js","Login.js","Header.js","SidebarOption.js","Sidebar.js","Message.js","ChatInput.js","Chat.js","App.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firestore","auth","provider","GoogleAuthProvider","StateContext","createContext","StateProvider","reducer","initialState","children","Provider","value","useReducer","useStateValue","useContext","actionTypes","state","action","console","log","type","user","Login","dispatch","className","src","alt","Button","onClick","signInWithPopup","then","result","catch","error","alert","message","Header","Avatar","displayName","photoURL","placeholder","SidebarOption","Icon","title","id","addChannelOption","history","useHistory","channelName","prompt","collection","add","name","push","Sidebar","useState","channels","setChannels","useEffect","onSnapshot","snapshot","docs","map","doc","data","InsertCommentIcon","InboxIcon","DraftsIcon","BookmarkBorderIcon","PeopleAltIcon","AppsIcon","FileCopyIcon","ExpandLessIcon","ExpandMoreIcon","AddIcon","channel","Message","timestamp","userImage","Date","toDate","toUTCString","ChatInput","channelId","input","setInput","onChange","e","target","toLowerCase","preventDefault","FieldValue","serverTimestamp","Chat","roomId","useParams","roomDetails","setRoomDetails","roomMessages","setRoomMessages","orderBy","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9490123a.chunk.js","sourcesContent":["import firebase from 'firebase';\n\nconst firebaseConfig = {\n    apiKey: 'AIzaSyATPng7tirgb2LTivwRI4D0-Qjjrdyd--U',\n    authDomain: 'slack-clone-project-65b9a.firebaseapp.com',\n    databaseURL: 'https://slack-clone-project-65b9a.firebaseio.com',\n    projectId: 'slack-clone-project-65b9a',\n    storageBucket: 'slack-clone-project-65b9a.appspot.com',\n    messagingSenderId: '384603969365',\n    appId: '1:384603969365:web:f11e453dbf5afd269881dc',\n};\n\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\nconst db = firebaseApp.firestore();\n\nconst auth = firebase.auth();\nconst provider = new firebase.auth.GoogleAuthProvider();\n\nexport { auth, provider };\nexport default db;\n","// importing the context api stuff\nimport React, { createContext, useContext, useReducer } from 'react';\n\n// preparing the data layer\nexport const StateContext = createContext();\n\n// higher order component\n// we're going to be using this to essentially wrap our app\n// so the main purpose of this block here is\n// it allows us to have something called a state provider and\n// we basically just wrap the app inside of the state provider and it provides that sort of data layer functionality\n\n// reducer - listens to any kind of action you choose\n// initialState - what data layer looks initially\n// {children} - entire app\nexport const StateProvider = ({ reducer, initialState, children }) => (\n    <StateContext.Provider value={useReducer(reducer, initialState)}>\n        {children}\n    </StateContext.Provider>\n);\n\n// whenever we want to pull something from the data layer we use this 'useStateValue' hook\nexport const useStateValue = () => useContext(StateContext);\n","export const initialState = {\n    user: null,\n    // user: 'oksana', // for debugging\n};\n\nexport const actionTypes = {\n    SET_USER: 'SET_USER',\n};\n\nconst reducer = (state, action) => {\n    console.log(action);\n    switch (action.type) {\n        case actionTypes.SET_USER:\n            return {\n                ...state,\n                user: action.user,\n            };\n        default:\n            return state;\n    }\n};\n\nexport default reducer;\n","import React from 'react';\nimport './Login.css';\nimport { Button } from '@material-ui/core';\nimport { auth, provider } from './firebase';\nimport { useStateValue } from './StateProvider';\nimport { actionTypes } from './reducer';\n\nconst Login = () => {\n    const [state, dispatch] = useStateValue();\n    const signIn = () => {\n        auth.signInWithPopup(provider)\n            .then((result) => {\n                console.log(result);\n                dispatch({\n                    type: actionTypes.SET_USER,\n                    user: result.user,\n                });\n            })\n            .catch((error) => {\n                alert(error.message);\n            });\n    };\n\n    return (\n        <div className=\"login\">\n            <div className=\"login__container\">\n                <img\n                    src=\"https://cdn.mos.cms.futurecdn.net/SDDw7CnuoUGax6x9mTo7dd.jpg\"\n                    // src=\"https://cdn.brandfolder.io/5H442O3W/at/pl546j-7le8zk-afym5u/Slack_Mark_Web.png\"\n                    alt=\"\"\n                />\n                <h1>Sign in to Oksana Bibik HQ</h1>\n                <p>oksanabibik.slack.com</p>\n                <Button onClick={signIn}>Sign In with Google</Button>\n            </div>\n        </div>\n    );\n};\n\nexport default Login;\n","import React from 'react';\nimport './Header.css';\nimport { Avatar } from '@material-ui/core';\nimport AccessTimeIcon from '@material-ui/icons/AccessTime';\nimport SearchIcon from '@material-ui/icons/Search';\nimport HelpIcon from '@material-ui/icons/Help';\nimport { useStateValue } from './StateProvider';\n\nconst Header = () => {\n    const [{ user }] = useStateValue();\n\n    return (\n        <div className=\"header\">\n            <div className=\"header__left\">\n                {/* Avatars for logged in user */}\n                <Avatar\n                    className=\"header__avatar\"\n                    // alt=\"Oksana B.\"\n                    alt={user?.displayName}\n                    src={user?.photoURL}\n                />\n\n                <AccessTimeIcon />\n            </div>\n            <div className=\"header__search\">\n                <SearchIcon />\n\n                <input type=\"text\" placeholder=\"Search Clever Programmer\" />\n            </div>\n            <div className=\"header__right\">\n                <HelpIcon />\n            </div>\n        </div>\n    );\n};\n\nexport default Header;\n","import React from 'react';\nimport './SidebarOption.css';\nimport { useHistory } from 'react-router-dom';\nimport db from './firebase';\n\nconst SidebarOption = ({ Icon, title, id, addChannelOption }) => {\n    const history = useHistory();\n    const selectChannel = () => {\n        if (id) {\n            history.push(`/room/${id}`);\n        } else {\n            history.push(title);\n        }\n    };\n    const addChannel = () => {\n        const channelName = prompt('Please enter the channel name');\n        if (channelName) {\n            db.collection('rooms').add({\n                name: channelName,\n            });\n        }\n    };\n    return (\n        <div className=\"sidebarOption\" onClick={addChannelOption ? addChannel : selectChannel}>\n            {Icon && <Icon className=\"sidebarOption__icon\" />}\n            {Icon ? (\n                <h3>{title}</h3>\n            ) : (\n                <h3 className=\"sidebarOption__channel\">\n                    <span className=\"sidebarOption__hash\">#</span>\n                    {title}\n                </h3>\n            )}\n        </div>\n    );\n};\n\nexport default SidebarOption;\n","import React, { useState, useEffect } from 'react';\nimport './Sidebar.css';\nimport FiberManualRecordIcon from '@material-ui/icons/FiberManualRecord';\nimport CreateIcon from '@material-ui/icons/Create';\nimport SidebarOption from './SidebarOption';\nimport InsertCommentIcon from '@material-ui/icons/InsertComment';\nimport InboxIcon from '@material-ui/icons/Inbox';\nimport DraftsIcon from '@material-ui/icons/Drafts';\nimport BookmarkBorderIcon from '@material-ui/icons/BookmarkBorder';\nimport PeopleAltIcon from '@material-ui/icons/PeopleAlt';\nimport AppsIcon from '@material-ui/icons/Apps';\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\nimport ExpandLessIcon from '@material-ui/icons/ExpandLess';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport AddIcon from '@material-ui/icons/Add';\nimport db from './firebase';\nimport { useStateValue } from './StateProvider';\n\nconst Sidebar = () => {\n    const [channels, setChannels] = useState([]);\n    const [{ user }] = useStateValue();\n\n    useEffect(() => {\n        // Run this code ONCE when the sidebar component loads\n        db.collection('rooms').onSnapshot((snapshot) => {\n            setChannels(\n                snapshot.docs.map((doc) => ({\n                    id: doc.id,\n                    name: doc.data().name,\n                }))\n            );\n        });\n    }, []);\n\n    return (\n        <div className=\"sidebar\">\n            <div className=\"sidebar__header\">\n                <div className=\"sidebar__info\">\n                    <h2>Clever Programmer</h2>\n                    <h3>\n                        <FiberManualRecordIcon />\n                        {/* Oksana B. */}\n                        {user?.displayName}\n                    </h3>\n                </div>\n                <CreateIcon />\n            </div>\n\n            <SidebarOption Icon={InsertCommentIcon} title=\"Threads\" />\n            <SidebarOption Icon={InboxIcon} title=\"Mentions & reactions\" />\n            <SidebarOption Icon={DraftsIcon} title=\"Saved items\" />\n            <SidebarOption Icon={BookmarkBorderIcon} title=\"Channel browser\" />\n            <SidebarOption Icon={PeopleAltIcon} title=\"People & user groups\" />\n            <SidebarOption Icon={AppsIcon} title=\"Apps\" />\n            <SidebarOption Icon={FileCopyIcon} title=\"File browser\" />\n            <SidebarOption Icon={ExpandLessIcon} title=\"Show less\" />\n            <hr />\n            <SidebarOption Icon={ExpandMoreIcon} title=\"Channels\" />\n            <hr />\n            <SidebarOption Icon={AddIcon} addChannelOption title=\"Add Channel\" />\n\n            {/* Connect to DB and list all the channels */}\n            {channels.map((channel) => (\n                <SidebarOption id={channel.id} title={channel.name} />\n            ))}\n        </div>\n    );\n};\n\nexport default Sidebar;\n","import React from 'react';\nimport './Message.css';\n\nconst Message = ({ message, timestamp, user, userImage }) => {\n    return (\n        <div className=\"message\">\n            <img src={userImage} alt=\"\" />\n            <div className=\"message__info\">\n                <h4>\n                    {user}{' '}\n                    <span className=\"message__timestamp\">\n                        {new Date(timestamp?.toDate()).toUTCString()}\n                    </span>\n                </h4>\n                <p>{message}</p>\n            </div>\n        </div>\n    );\n};\n\nexport default Message;\n","import React, { useState } from 'react';\nimport './ChatInput.css';\nimport db from './firebase';\nimport { useStateValue } from './StateProvider';\nimport firebase from 'firebase';\n\nconst ChatInput = ({ channelName, channelId }) => {\n    const [input, setInput] = useState('');\n    const [{ user }] = useStateValue();\n\n    const sendMessage = (e) => {\n        e.preventDefault();\n\n        if (channelId) {\n            db.collection('rooms').doc(channelId).collection('messages').add({\n                message: input,\n                timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n                user: user.displayName,\n                userImage: user.photoURL,\n            });\n        }\n\n        setInput('');\n    };\n\n    return (\n        <div className=\"chatInput\">\n            <form>\n                <input\n                    value={input}\n                    onChange={(e) => setInput(e.target.value)}\n                    placeholder={`Message #${channelName?.toLowerCase()}`}\n                />\n                <button type=\"submit\" onClick={sendMessage}>\n                    SEND\n                </button>\n            </form>\n        </div>\n    );\n};\n\nexport default ChatInput;\n","import React, { useState, useEffect } from 'react';\nimport './Chat.css';\nimport { useParams } from 'react-router-dom';\nimport StarBorderOutlinedIcon from '@material-ui/icons/StarBorderOutlined';\nimport InfoOutlinedIcon from '@material-ui/icons/InfoOutlined';\nimport db from './firebase';\nimport Message from './Message';\nimport ChatInput from './ChatInput';\n\n// All happens.. INSTANTLY!\n// 1.Change URL\n// 2.Connect to the database\n// 3.Uses URL param (roomID) to fetch room details from the db\n// http://localhost:3000/room/KvRGfzLMxL8w8E4wGBY7\nconst Chat = () => {\n    const { roomId } = useParams();\n    const [roomDetails, setRoomDetails] = useState(null);\n    const [roomMessages, setRoomMessages] = useState([]);\n\n    useEffect(() => {\n        if (roomId) {\n            db.collection('rooms')\n                .doc(roomId)\n                .onSnapshot((snapshot) => setRoomDetails(snapshot.data()));\n        }\n\n        db.collection('rooms')\n            .doc(roomId)\n            .collection('messages')\n            .orderBy('timestamp', 'asc')\n            .onSnapshot((snapshot) => setRoomMessages(snapshot.docs.map((doc) => doc.data())));\n    }, [roomId]);\n\n    console.log(roomDetails);\n    console.log('MESSAGES >>> ', roomMessages);\n\n    return (\n        <div className=\"chat\">\n            {/* <h2>You are in the {roomId} room</h2> */}\n            <div className=\"chat__header\">\n                <div className=\"chat__headerLeft\">\n                    <h4 className=\"chat__channelName\">\n                        <strong>#{roomDetails?.name}</strong>\n                        <StarBorderOutlinedIcon />\n                    </h4>\n                </div>\n                <div className=\"chat__headerRight\">\n                    <p>\n                        <InfoOutlinedIcon /> Details\n                    </p>\n                </div>\n            </div>\n\n            <div className=\"chat__messages\">\n                {roomMessages.map(({ message, timestamp, user, userImage }) => (\n                    <Message\n                        message={message}\n                        timestamp={timestamp}\n                        user={user}\n                        userImage={userImage}\n                    />\n                ))}\n            </div>\n\n            <ChatInput channelName={roomDetails?.name} channelId={roomId} />\n        </div>\n    );\n};\n\nexport default Chat;\n","import React, { useState } from 'react';\nimport Login from './Login';\n\nimport './App.css';\nimport Header from './Header';\nimport Sidebar from './Sidebar';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport Chat from './Chat';\nimport { useStateValue } from './StateProvider';\n\nfunction App() {\n    // const [user, setUser] = useState(null);\n    // const [user, setUser] = useState('Mark');\n\n    // const [state, dispatch] = useStateValue(); // destructure\n    const [{ user }, dispatch] = useStateValue();\n\n    return (\n        <div className=\"app\">\n            <Router>\n                {!user ? (\n                    // <h1>Login Page</h1>\n                    <Login />\n                ) : (\n                    <>\n                        <Header />\n                        <div className=\"app__body\">\n                            <Sidebar />\n                            {/* React-Router -> Chat screen */}\n                            <Switch>\n                                <Route path=\"/room/:roomId\">\n                                    {/* e.g. http://localhost:3000/room/general */}\n                                    {/* <h1>Chat Screen</h1> */}\n                                    <Chat />\n                                </Route>\n                                <Route path=\"/\">\n                                    <h1>Welcome</h1>\n                                    {/* <Chat /> */}\n                                </Route>\n                            </Switch>\n                        </div>\n                    </>\n                )}\n            </Router>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { StateProvider } from './StateProvider';\nimport reducer, { initialState } from './reducer';\n\nReactDOM.render(\n    <React.StrictMode>\n        <StateProvider initialState={initialState} reducer={reducer}>\n            <App />\n        </StateProvider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}